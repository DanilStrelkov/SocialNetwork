name: Github ci-cd

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "*"

env:
  BACKEND_CLASSPATH: 'zerone-backend/src/main/resources/'

jobs:
  migration:
    runs-on: ubuntu-latest
    if: github.ref_name == 'master'
    steps:
      - name: Creating a project copy
        uses: actions/checkout@v3
      - name: Updating database
        uses: liquibase-github-actions/update@v4.21.1
        with:
          changelogFile: ${{ secrets.DATABASE_CHANGELOG_PATH }}
          classpath: ${{ env.BACKEND_CLASSPATH }}
          url: ${{ secrets.DATABASE_URL }}
          username: ${{ secrets.DATABASE_USERNAME }}
          password: ${{ secrets.DATABASE_PASSWORD }}
          logLevel: INFO

  build:
    runs-on: ubuntu-latest
    if: always()
    needs: migration
    steps:
    - name: Creating a project copy
      uses: actions/checkout@v3
    - name: Set up JDK 19
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '19'
        cache: 'maven'
    - name: Build with Maven
      run: mvn compile

  test:
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    needs: build
    steps:
      - name: Creating a project copy
        uses: actions/checkout@v3
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'
          cache: 'maven'
      - name: Build with Maven
        run: mvn test

  sonarcloud:
    if: always() && needs.test.result == 'success'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Creating a project copy
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'
          cache: 'maven'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify sonar:sonar \
          -Dsonar.projectKey=Muryginds_SocialNetwork \
          -Dsonar.organization=muryginds \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.java.coveragePlugin=jacoco

  package:
    if: github.ref_name == 'master'
    needs: sonarcloud
    runs-on: ubuntu-latest
    steps:
      - name: Creating a project copy
        uses: actions/checkout@v3
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'
          cache: 'maven'
      - name: Creating packages
        run: mvn package -Dmaven.test.skip
      - name: Saving artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jars
          path: '*/target/*.jar'

  deploy:
    if: github.ref_name == 'master'
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Creating a project copy
        uses: actions/checkout@v3
      - name: Downloading artifacts
        uses: actions/download-artifact@v3
        with:
          name: jars
      # Configure ssh - connection
      - run: which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
      - run: eval $(ssh-agent -s)
      - run: echo "$SSH_PRIVATE_KEY" | ssh-add -
      - run: mkdir -p ~/.ssh
      - run: chmod 700 ~/.ssh
      - run: ssh-keyscan $DEV_HOST >> ~/.ssh/known_hosts
      - run: echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      - run: chmod 644 ~/.ssh/known_hosts
      # Creating backups
      - run: |
          ssh $DEV_USER@$DEV_HOST "[ ! -f $DEV_APP_PATH/admin.jar ] \
          || mv $DEV_APP_PATH/admin.jar $BACKUP/admin-build-$CI_PIPELINE_ID.jar"
      - run: |
          ssh $DEV_USER@$DEV_HOST "[ ! -f $DEV_APP_PATH/backend.jar ] \
          || mv $DEV_APP_PATH/backend.jar $BACKUP/backend-build-$CI_PIPELINE_ID.jar"
      - run: |
          ssh $DEV_USER@$DEV_HOST "[ ! -f $DEV_APP_PATH/api-gateway.jar ] \
          || mv $DEV_APP_PATH/api-gateway.jar $BACKUP/api-gateway-build-$CI_PIPELINE_ID.jar"
      - run: |
          ssh $DEV_USER@$DEV_HOST "[ ! -f $DEV_APP_PATH/eureka-server.jar ] \
          || mv $DEV_APP_PATH/eureka-server.jar $BACKUP/eureka-server-build-$CI_PIPELINE_ID.jar"
          - scp eureka-server/target/eureka-server-0.0.1-SNAPSHOT.jar $DEV_USER@$DEV_HOST:$DEV_APP_PATH/eureka-server.jar
      # Copying files to remote server
      - run: scp api-gateway/target/api-gateway-0.0.1-SNAPSHOT.jar $DEV_USER@$DEV_HOST:$DEV_APP_PATH/api-gateway.jar
      - run: scp zerone-admin/target/zerone-admin-0.0.1-SNAPSHOT.jar $DEV_USER@$DEV_HOST:$DEV_APP_PATH/admin.jar
      - run: scp zerone-backend/target/zerone-backend-0.0.1-SNAPSHOT.jar $DEV_USER@$DEV_HOST:$DEV_APP_PATH/backend.jar
      - run: scp /builds/javapro_team34/zerone-backend-multimodule/docker-compose.yaml $DEV_USER@$DEV_HOST:$USER_HOME_PATH/
      # Starting docker compose
      - run: ssh $DEV_USER@$DEV_HOST "docker compose down"
      - run: ssh $DEV_USER@$DEV_HOST "docker compose up -d"
