name: Github ci-cd

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "*"

env:
  BACKEND_CLASSPATH: 'zerone-backend/src/main/resources/'

jobs:
  migration:
    runs-on: ubuntu-latest
    if: github.ref_name == 'master'
    steps:
      - name: Creating a project copy
        uses: actions/checkout@v3
      - name: Updating database
        uses: liquibase-github-actions/update@v4.21.1
        with:
          changelogFile: ${{ secrets.DATABASE_CHANGELOG_PATH }}
          classpath: ${{ env.BACKEND_CLASSPATH }}
          url: ${{ secrets.DATABASE_URL }}
          username: ${{ secrets.DATABASE_USERNAME }}
          password: ${{ secrets.DATABASE_PASSWORD }}
          logLevel: INFO

  build:
    runs-on: ubuntu-latest
  #if: always()
    needs: migration
    steps:
    - name: Creating a project copy
      uses: actions/checkout@v3
    - name: Set up JDK 19
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '19'
        cache: 'maven'
    - name: Build with Maven
      run: mvn compile

  test:
    runs-on: ubuntu-latest
    #if: always() && needs.build.result == 'success'
    needs: build
    steps:
      - name: Creating a project copy
        uses: actions/checkout@v3
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'
          cache: 'maven'
      - name: Build with Maven
        run: mvn test

  sonarcloud:
    #if: always() && needs.test.result == 'success'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Creating a project copy
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'
          cache: 'maven'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify sonar:sonar \
          -Dsonar.projectKey=Muryginds_SocialNetwork \
          -Dsonar.organization=muryginds \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.java.coveragePlugin=jacoco

  package:
    if: always()
    #if: github.ref_name == 'master'
    #needs: sonarcloud
    runs-on: ubuntu-latest
    steps:
      - name: Creating a project copy
        uses: actions/checkout@v3
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'
          cache: 'maven'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Creating packages
        run: mvn package -Dmaven.test.skip
      - run: mkdir -p ~/artifacts
      - run: mv */target/eureka-server*.jar ~/artifacts/eureka-server.jar
      - run: mv */target/api-gateway*.jar ~/artifacts/api-gateway.jar
      - run: mv */target/zerone-admin*.jar ~/artifacts/admin.jar
      - run: mv */target/zerone-backend*.jar ~/artifacts/backend.jar
      - run: mv docker-compose.yaml ~/artifacts/docker-compose.yaml
      - name: Saving artifacts
        uses: actions/upload-artifact@v3
        with:
          name: files
          path: ~/artifacts

  deploy:
    if: always()
    #if: github.ref_name == 'master'
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Creating a project copy
        uses: actions/checkout@v3
      - name: Downloading project files
        uses: actions/download-artifact@v3
        with:
          name: files
          path: artifacts

      - name: creating backups via ssh
        uses: appleboy/ssh-action@v0.1.10
        env:
          DEV_APP_PATH: ${{ secrets.DEV_APP_PATH }}
          BACKUP_PATH: ${{ secrets.BACKUP_PATH }}
          GITHUB_RUN_NUMBER: ${{ github.run.number }}
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_HOST_SSH_PORT }}
          envs: DEV_APP_PATH,BACKUP_PATH,GITHUB_RUN_NUMBER
          script: |
            [ ! -f $DEV_APP_PATH/api-gateway.jar ] || mv $DEV_APP_PATH/api-gateway.jar $BACKUP_PATH/api-gateway-build-$GITHUB_RUN_NUMBER.jar
            [ ! -f $DEV_APP_PATH/eureka-server.jar ] || mv $DEV_APP_PATH/eureka-server.jar $BACKUP_PATH/eureka-server-build-$GITHUB_RUN_NUMBER.jar
            [ ! -f $DEV_APP_PATH/admin.jar ] || mv $DEV_APP_PATH/admin.jar $BACKUP_PATH/admin-build-$GITHUB_RUN_NUMBER.jar
            [ ! -f $DEV_APP_PATH/backend.jar ] || mv $DEV_APP_PATH/backend.jar $BACKUP_PATH/backend-build-$GITHUB_RUN_NUMBER.jar

      - name: copy files via ssh
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_HOST_SSH_PORT }}
          source: artifacts
          target: ${{ secrets.DEV_APP_PATH }}
          strip_components: 1

      - name: executing remote ssh commands
        uses: appleboy/ssh-action@v0.1.10
        env:
          DEV_APP_PATH: ${{ secrets.DEV_APP_PATH }}
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_HOST_SSH_PORT }}
          envs: DEV_APP_PATH
          script: |
            mv $DEV_APP_PATH/docker-compose.yaml ~/docker-compose.yaml
            docker compose down
            docker compose up -d
