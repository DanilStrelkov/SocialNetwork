  version: "3.7"

  networks:
    kafka-net:
      name: kafka-net
      driver: bridge

  services:
    zookeeper:
      image: zookeeper:3.7.0
      container_name: zookeeper
      restart: "no"
      networks:
        - kafka-net
      ports:
        - "2181:2181"

    kafka:
      image: obsidiandynamics/kafka
      container_name: kafka
      restart: "no"
      networks:
        - kafka-net
      ports:
        - "29092:29092"
      environment:
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
        KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
        KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
        KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
        KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
        KAFKA_BROKER_ID: 1
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      depends_on:
        - zookeeper

    kafdrop:
      image: obsidiandynamics/kafdrop
      container_name: kafdrop
      restart: "no"
      networks:
        - kafka-net
      ports:
        - "9000:9000"
      environment:
        KAFKA_BROKERCONNECT: "kafka:29092"
      depends_on:
        - "kafka"

    postgres:
      container_name: postgres
      image: postgres
      environment:
        POSTGRES_DB: skillbox
        POSTGRES_USER: skillbox
        POSTGRES_PASSWORD: password
        PGDATA: /data/postgres
      volumes:
        - postgres:/data/postgres
      ports:
        - "5432:5432"
      restart: on-failure:5

    frontend:
      container_name: frontend
      image: dimok82/zeone
      ports:
        - "80:80"
      restart: on-failure:5

    backend:
      container_name: backend
      image: eclipse-temurin:19-jdk-jammy
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/skillbox?stringtype=unspecified
        SPRING_DATASOURCE_USERNAME: skillbox
        SPRING_DATASOURCE_PASSWORD: password
        SPRING_PROFILES_ACTIVE: prod
      ports:
        -  "8086:8086"
      volumes:
        - ./jars:/app
      working_dir: /app
      command: java -jar backend.jar
      depends_on:
        - postgres
      restart: on-failure:5

    grafana:
      container_name: grafana
      image: grafana/grafana
      build: './config/grafana'
      ports:
        - 3000:3000
      volumes:
        - ./grafana:/var/lib/grafana
      environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=admin
      networks:
        monitoring:
          aliases:
            - grafana
      depends_on:
        - prometheus
      restart: on-failure:5

    prometheus:
      container_name: prometheus
      image: prom/prometheus
      ports:
        - 9090:9090
      volumes:
        - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
        - ./prometheus:/prometheus
      networks:
        monitoring:
          aliases:
            - prometheus
      restart: on-failure:5

  volumes:
    postgres:
networks:
    monitoring:
